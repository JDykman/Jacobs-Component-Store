#!/usr/bin/env node
import { promises as fs } from 'fs';
import path from 'path';
import url from 'url';

const __dirname = path.dirname(url.fileURLToPath(import.meta.url));
const repoRoot = path.resolve(__dirname, '..');

async function generateChangeSummary(appliedMoves, tocSections, aiNotes) {
  const timestamp = new Date().toISOString();
  const summary = {
    timestamp,
    changes: {
      moves: appliedMoves,
      toc_sections: tocSections,
      notes: aiNotes || []
    }
  };

  // Write detailed JSON summary
  const summaryPath = path.join(repoRoot, 'ai-changes-summary.json');
  await fs.writeFile(summaryPath, JSON.stringify(summary, null, 2), 'utf8');

  // Generate human-readable markdown summary
  const markdownLines = [
    '# AI Component Organization Summary',
    '',
    `**Generated:** ${new Date(timestamp).toLocaleString()}`,
    '',
    '## Changes Made',
    ''
  ];

  if (appliedMoves.length > 0) {
    markdownLines.push('### Component Moves');
    for (const move of appliedMoves) {
      const status = move.status === 'success' ? '✅' : '❌';
      markdownLines.push(`${status} \`${move.from}\` → \`${move.to}\``);
      if (move.error) {
        markdownLines.push(`   - Error: ${move.error}`);
      }
    }
    markdownLines.push('');
  }

  if (tocSections && Object.keys(tocSections).length > 0) {
    markdownLines.push('### New Table of Contents Structure');
    for (const [section, components] of Object.entries(tocSections)) {
      markdownLines.push(`- **${section}**`);
      for (const component of components) {
        markdownLines.push(`  - ${component}`);
      }
    }
    markdownLines.push('');
  }

  if (aiNotes && aiNotes.length > 0) {
    markdownLines.push('### AI Notes');
    for (const note of aiNotes) {
      markdownLines.push(`- ${note}`);
    }
    markdownLines.push('');
  }

  markdownLines.push('---', '', 'This summary was automatically generated by the AI component organization workflow.');

  const markdownPath = path.join(repoRoot, 'AI_CHANGES_SUMMARY.md');
  await fs.writeFile(markdownPath, markdownLines.join('\n'), 'utf8');

  return { summaryPath, markdownPath };
}

async function main() {
  // Mock data for testing
  const mockMoves = [
    { from: 'components/old-button', to: 'components/ui/button', status: 'success' },
    { from: 'components/old-card', to: 'components/ui/card', status: 'success' },
    { from: 'components/broken-component', to: 'components/ui/broken', status: 'failed', error: 'Component not found' }
  ];

  const mockTocSections = {
    'UI Components': ['button', 'card', 'input', 'modal'],
    'Data Display': ['table', 'chart', 'list'],
    'Navigation': ['nav', 'breadcrumb', 'pagination']
  };

  const mockNotes = [
    'Grouped common UI components into ui/ subdirectory',
    'Organized data display components separately',
    'Created navigation component category'
  ];

  const { summaryPath, markdownPath } = await generateChangeSummary(mockMoves, mockTocSections, mockNotes);
  
  console.log('✅ Mock change summary generated successfully!');
  console.log(`📄 JSON summary: ${summaryPath}`);
  console.log(`📝 Markdown summary: ${markdownPath}`);
  console.log('\n📋 You can now run the actual AI workflow to see real changes.');
}

main().catch((err) => {
  console.error('❌ Error generating mock summary:', err);
  process.exit(1);
});